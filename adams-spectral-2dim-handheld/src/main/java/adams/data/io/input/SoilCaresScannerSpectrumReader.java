/*
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * SoilCaresScannerSpectrumReader.java
 * Copyright (C) 2017 University of Waikato, Hamilton, NZ
 */

package adams.data.io.input;

import adams.core.io.FileUtils;
import adams.data.report.DataType;
import adams.data.report.Field;
import adams.data.sampledata.SampleData;
import adams.data.spectrum.Spectrum;
import adams.data.spectrum.SpectrumPoint;
import adams.data.spreadsheet.Cell;
import adams.data.spreadsheet.Row;
import adams.data.spreadsheet.SpreadSheet;

import java.io.InputStream;
import java.util.Enumeration;
import java.util.logging.Level;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

/**
 <!-- globalinfo-start -->
 * Reads spectra from ZIP files generated by the SoilCares Scanner app.
 * <br><br>
 <!-- globalinfo-end -->
 *
 <!-- options-start -->
 * <pre>-logging-level &lt;OFF|SEVERE|WARNING|INFO|CONFIG|FINE|FINER|FINEST&gt; (property: loggingLevel)
 * &nbsp;&nbsp;&nbsp;The logging level for outputting errors and debugging output.
 * &nbsp;&nbsp;&nbsp;default: WARNING
 * </pre>
 * 
 * <pre>-input &lt;adams.core.io.PlaceholderFile&gt; (property: input)
 * &nbsp;&nbsp;&nbsp;The file to read and turn into a container.
 * &nbsp;&nbsp;&nbsp;default: ${CWD}
 * </pre>
 * 
 * <pre>-create-dummy-report &lt;boolean&gt; (property: createDummyReport)
 * &nbsp;&nbsp;&nbsp;If true, then a dummy report is created if none present.
 * &nbsp;&nbsp;&nbsp;default: false
 * </pre>
 * 
 * <pre>-instrument &lt;java.lang.String&gt; (property: instrument)
 * &nbsp;&nbsp;&nbsp;The name of the instrument that generated the spectra (if not already present 
 * &nbsp;&nbsp;&nbsp;in data).
 * &nbsp;&nbsp;&nbsp;default: unknown
 * </pre>
 * 
 * <pre>-format &lt;java.lang.String&gt; (property: format)
 * &nbsp;&nbsp;&nbsp;The data format string.
 * &nbsp;&nbsp;&nbsp;default: NIR
 * </pre>
 * 
 * <pre>-keep-format &lt;boolean&gt; (property: keepFormat)
 * &nbsp;&nbsp;&nbsp;If enabled the format obtained from the file is not replaced by the format 
 * &nbsp;&nbsp;&nbsp;defined here.
 * &nbsp;&nbsp;&nbsp;default: false
 * </pre>
 * 
 * <pre>-use-absolute-source &lt;boolean&gt; (property: useAbsoluteSource)
 * &nbsp;&nbsp;&nbsp;If enabled the source report field stores the absolute file name rather 
 * &nbsp;&nbsp;&nbsp;than just the name.
 * &nbsp;&nbsp;&nbsp;default: false
 * </pre>
 * 
 * <pre>-spectrum-type &lt;BACK|CORR|SC&gt; (property: spectrumType)
 * &nbsp;&nbsp;&nbsp;The type of spectrum to read from the data.
 * &nbsp;&nbsp;&nbsp;default: SC
 * </pre>
 * 
 * <pre>-amplitude-type &lt;INTERFEROGRAM|SPECTRUM|ABSORBANCE&gt; (property: amplitudeType)
 * &nbsp;&nbsp;&nbsp;The type of amplitude to read from the data.
 * &nbsp;&nbsp;&nbsp;default: ABSORBANCE
 * </pre>
 * 
 <!-- options-end -->
 *
 * @author FracPete (fracpete at waikato dot ac dot nz)
 * @version $Revision$
 */
public class SoilCaresScannerSpectrumReader
  extends AbstractSpectrumReader {

  private static final long serialVersionUID = 2850033699787114065L;

  /** the suffix for 'back' files. */
  public final static String SUFFIX_BACK = "_back.csv";

  /** the suffix for 'corr' files. */
  public final static String SUFFIX_CORR = "_corr.csv";

  /** the suffix for 'sc' files. */
  public final static String SUFFIX_SC = "_sc.csv";

  /** the suffix for 'device' files. */
  public final static String SUFFIX_DEVICE = "_device.csv";

  /** the name of the metadata file. */
  public final static String METADATA = "metadata.csv";

  /** the column name for the interferogram. */
  public final static String INTERFEROGRAM = "Interferogram";

  /** the column name for the wavelengths. */
  public final static String WAVELENGTH = "Wavelength";

  /** the column name for the spectrum. */
  public final static String SPECTRUM = "Spectrum";

  /** the column name for the wavelengths. */
  public final static String ABSORBANCE = "Absorbance";

  /**
   * Determines the type of spectrum to load.
   */
  public enum SpectrumType {
    BACK,
    CORR,
    SC,
  }

  /**
   * Determines the type of amplitudes to load.
   */
  public enum AmplitudeType {
    INTERFEROGRAM,
    SPECTRUM,
    ABSORBANCE,
  }

  /** the type of spectrum to read. */
  protected SpectrumType m_SpectrumType;

  /** the type of amplitude to read for a spectrum. */
  protected AmplitudeType m_AmplitudeType;
  
  /**
   * Returns a string describing the object.
   *
   * @return 			a description suitable for displaying in the gui
   */
  @Override
  public String globalInfo() {
    return "Reads spectra from ZIP files generated by the SoilCares Scanner app.";
  }

  /**
   * Adds options to the internal list of options.
   */
  @Override
  public void defineOptions() {
    super.defineOptions();

    m_OptionManager.add(
      "spectrum-type", "spectrumType",
      SpectrumType.SC);

    m_OptionManager.add(
      "amplitude-type", "amplitudeType",
      AmplitudeType.ABSORBANCE);
  }

  /**
   * Returns a string describing the format (used in the file chooser).
   *
   * @return 			a description suitable fospectralDatar displaying in the
   * 				file chooser
   */
  @Override
  public String getFormatDescription() {
    return "SoilCars Scanner";
  }

  /**
   * Returns the extension(s) of the format.
   *
   * @return 			the extension (without the dot!)
   */
  @Override
  public String[] getFormatExtensions() {
    return new String[]{"zip"};
  }

  /**
   * Sets the type of spectrum to read.
   *
   * @param value	the type
   */
  public void setSpectrumType(SpectrumType value) {
    m_SpectrumType = value;
    reset();
  }

  /**
   * Returns the type of spectrum to read.
   *
   * @return 		the type
   */
  public SpectrumType getSpectrumType() {
    return m_SpectrumType;
  }

  /**
   * Returns the tip text for this property.
   *
   * @return 		tip text for this property suitable for
   * 			displaying in the GUI or for listing the options.
   */
  public String spectrumTypeTipText() {
    return "The type of spectrum to read from the data.";
  }

  /**
   * Sets the type of amplitude to read.
   *
   * @param value	the type
   */
  public void setAmplitudeType(AmplitudeType value) {
    m_AmplitudeType = value;
    reset();
  }

  /**
   * Returns the type of amplitude to read.
   *
   * @return 		the type
   */
  public AmplitudeType getAmplitudeType() {
    return m_AmplitudeType;
  }

  /**
   * Returns the tip text for this property.
   *
   * @return 		tip text for this property suitable for
   * 			displaying in the GUI or for listing the options.
   */
  public String amplitudeTypeTipText() {
    return "The type of amplitude to read from the data.";
  }

  /**
   * Reads the meta-data from the zip file.
   *
   * @param zip		the zip file
   * @param entry	the entry with the meta-data
   * @return		the meta-data
   */
  protected SampleData readMetaData(ZipFile zip, ZipEntry entry) {
    SampleData 			result;
    InputStream 		is;
    CsvSpreadSheetReader	reader;
    SpreadSheet			sheet;

    result = new SampleData();
    is     = null;
    try {
      is     = zip.getInputStream(entry);
      reader = new CsvSpreadSheetReader();
      reader.setNoHeader(true);
      sheet  = reader.read(is);
      is.close();
      for (Row row: sheet.rows()) {
	if (row.getCell(0).getContent().equals("SampleId")) {
	  result.addField(new Field(SampleData.SAMPLE_ID, DataType.STRING));
	  result.setStringValue(SampleData.SAMPLE_ID, row.getCell(1).getContent());
	  continue;
	}
	if (row.getCell(1).isNumeric()) {
	  result.addField(new Field(row.getCell(0).getContent(), DataType.NUMERIC));
	  result.setNumericValue(row.getCell(0).getContent(), row.getCell(1).toDouble());
	}
	else {
	  result.addField(new Field(row.getCell(0).getContent(), DataType.STRING));
	  result.setStringValue(row.getCell(0).getContent(), row.getCell(1).getContent());
	}
      }
    }
    catch (Exception e) {
      getLogger().log(Level.SEVERE, "Failed to read meta-data from entry: " + entry.getName(), e);
    }
    finally {
      FileUtils.closeQuietly(is);
    }

    return result;
  }

  /**
   * Reads the spectrum from the specified zip entry.
   *
   * @param zip		the zip file
   * @param entry	the entry to read
   * @return		the spectrum, null if failed to read
   */
  protected Spectrum readSpectrum(ZipFile zip, ZipEntry entry) {
    Spectrum			result;
    SpectrumPoint		point;
    InputStream			is;
    CsvSpreadSheetReader	reader;
    SpreadSheet			sheet;
    Cell			cell;
    int				waveCol;
    String			amplStr;
    int				amplCol;

    result = null;
    is     = null;
    try {
      is     = zip.getInputStream(entry);
      reader = new CsvSpreadSheetReader();
      sheet  = reader.read(is);
      is.close();

      // determine columns
      waveCol = sheet.getHeaderRow().indexOfContent(WAVELENGTH);
      if (waveCol == -1) {
	getLogger().severe("Failed to locate wavelength column: " + WAVELENGTH);
	return null;
      }
      switch (m_AmplitudeType) {
	case ABSORBANCE:
	  amplStr = ABSORBANCE;
	  break;
	case INTERFEROGRAM:
	  amplStr = INTERFEROGRAM;
	  break;
	case SPECTRUM:
	  amplStr = SPECTRUM;
	  break;
	default:
	  throw new IllegalStateException("Unhandled amplitude type: " + m_AmplitudeType);
      }
      amplCol = sheet.getHeaderRow().indexOfContent(amplStr);
      if (amplCol == -1) {
	getLogger().severe("Failed to locate amplitude column: " + amplStr);
	return null;
      }

      // read data
      result = new Spectrum();
      for (Row row: sheet.rows()) {
	if (!row.hasCell(waveCol) || row.getCell(waveCol).isMissing()
	  || !row.hasCell(amplCol) || row.getCell(amplCol).isMissing())
	  continue;
	point = new SpectrumPoint(
	  row.getCell(waveCol).toDouble().floatValue(),
	  row.getCell(amplCol).toDouble().floatValue());
	result.add(point);
      }
    }
    catch (Exception e) {
      getLogger().log(Level.SEVERE, "Failed to read spectrum from entry: " + entry.getName(), e);
      result = null;
    }
    finally {
      FileUtils.closeQuietly(is);
    }

    return result;
  }

  /**
   * Performs the actual reading.
   */
  @Override
  protected void readData() {
    ZipFile				zip;
    SampleData				meta;
    Spectrum				sp;
    String				sampleID;
    Enumeration<? extends ZipEntry>	entries;
    ZipEntry				entry;
    String				index;

    try {
      zip      = new ZipFile(m_Input.getAbsoluteFile());
      meta     = new SampleData();
      sampleID = "";
      // meta-data
      entries  = zip.entries();
      while (entries.hasMoreElements()) {
	entry = entries.nextElement();
	if (entry.getName().equals(METADATA)) {
	  meta = readMetaData(zip, entry);
	  if (meta.hasValue(SampleData.SAMPLE_ID))
	    sampleID = meta.getStringValue(SampleData.SAMPLE_ID);
	}
      }
      // spectra
      entries  = zip.entries();
      while (entries.hasMoreElements()) {
	entry = entries.nextElement();
	index = "";
	if (entry.getName().contains("_"))
	  index = entry.getName().substring(0, entry.getName().indexOf('_'));
	if ((entry.getName().endsWith(SUFFIX_BACK) && (m_SpectrumType == SpectrumType.BACK))
	  || (entry.getName().endsWith(SUFFIX_CORR) && (m_SpectrumType == SpectrumType.CORR))
	  || (entry.getName().endsWith(SUFFIX_SC) && (m_SpectrumType == SpectrumType.SC))) {
	  sp = readSpectrum(zip, entry);
	  if (sp != null) {
	    sp.getReport().assign(meta);
	    if (!sampleID.isEmpty())
	      sp.setID(sampleID);
	    if (!index.isEmpty())
	      sp.getReport().setStringValue("Index", index);
	    sp.getReport().setStringValue("ZipEntry", entry.getName());
	    m_ReadData.add(sp);
	  }
	}
      }
    }
    catch (Exception e) {
      getLogger().log(Level.SEVERE, "Failed to load file: " + m_Input, e);
    }
  }
}
