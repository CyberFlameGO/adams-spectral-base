/*
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * SpectrumFilter.java
 * Copyright (C) 2011-2015 University of Waikato, Hamilton, New Zealand
 */

package weka.filters.unsupervised.attribute;

import adams.core.ObjectCopyHelper;
import weka.core.Attribute;
import weka.core.Capabilities;
import weka.core.Capabilities.Capability;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.Option;
import weka.core.RevisionUtils;
import weka.core.Utils;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.MultiFilter;
import weka.filters.SimpleBatchFilter;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Vector;

/**
 <!-- globalinfo-start -->
 * A meta-filter that applies the base filter only to the spectral part of the dataset, i.e., attributes starting with 'amplitude-'.
 * <p/>
 <!-- globalinfo-end -->
 *
 <!-- options-start -->
 * Valid options are: <p/>
 * 
 * <pre> -output-debug-info
 *  If set, filter is run in debug mode and
 *  may output additional info to the console</pre>
 * 
 * <pre> -do-not-check-capabilities
 *  If set, filter capabilities are not checked before filter is built
 *  (use with caution).</pre>
 * 
 * <pre> -prefix-old &lt;att. prefix&gt;
 *  The old prefix to look for.
 *  (default: amplitude-)</pre>
 * 
 * <pre> -prefix-new &lt;att. prefix&gt;
 *  The new prefix to look use.
 *  (default: amplitude-)</pre>
 * 
 * <pre> -filter &lt;classname + options&gt;
 *  The base filter to apply to the spectral part.
 *  (default: weka.filters.AllFilter)</pre>
 * 
 * <pre> -keep-attribute-names
 *  Whether to keep the attribute names generated by the base filter.
 *  Only disambiguates them if necessary.
 *  (default: false)</pre>
 * 
 <!-- options-end -->
 *
 * @author  fracpete (fracpete at waikato dot ac dot nz)
 * @version $Revision: 2347 $
 */
public class SpectrumFilter
  extends SimpleBatchFilter {

  /** for serialization. */
  private static final long serialVersionUID = 5944266872914953692L;

  /** the prefix for a spectral attribute. */
  public final static String PREFIX_AMPLITUDE = "amplitude-";

  /** the base filter. */
  protected Filter m_Filter = new AllFilter();

  /** the old prefix. */
  protected String m_PrefixOld = PREFIX_AMPLITUDE;

  /** the new prefix. */
  protected String m_PrefixNew = PREFIX_AMPLITUDE;

  /** whether to keep the attribute names generated by the base filter. */
  protected boolean m_KeepAttributeNames = false;

  /** the multi-filter that does the actual work. */
  protected MultiFilter m_MultiFilter;

  /**
   * Returns a string describing this classifier.
   *
   * @return      a description of the classifier suitable for
   *              displaying in the explorer/experimenter gui
   */
  public String globalInfo() {
    return
        "A meta-filter that applies the base filter only to the spectral "
      + "part of the dataset, i.e., attributes starting with '"
      + PREFIX_AMPLITUDE + "'.";
  }

  /**
   * Returns an enumeration describing the available options.
   *
   * @return 		an enumeration of all the available options.
   */
  public Enumeration listOptions() {
    Vector 	result;
    Enumeration	enm;

    result = new Vector();

    enm = super.listOptions();
    while (enm.hasMoreElements())
      result.add(enm.nextElement());

    result.addElement(new Option(
      "\tThe old prefix to look for.\n"
	+ "\t(default: " + PREFIX_AMPLITUDE + ")",
      "prefix-old", 1, "-prefix-old <att. prefix>"));

    result.addElement(new Option(
      "\tThe new prefix to look use.\n"
	+ "\t(default: " + PREFIX_AMPLITUDE + ")",
      "prefix-new", 1, "-prefix-new <att. prefix>"));

    result.addElement(new Option(
      "\tThe base filter to apply to the spectral part.\n"
        + "\t(default: " + AllFilter.class.getName() + ")",
      "filter", 1, "-filter <classname + options>"));

    result.addElement(new Option(
      "\tWhether to keep the attribute names generated by the base filter.\n"
        + "\tOnly disambiguates them if necessary.\n"
        + "\t(default: false)",
      "keep-attribute-names", 0, "-keep-attribute-names"));

    return result.elements();
  }

  /**
   * Parses a list of options for this object.
   * Also resets the state of the filter (this reset doesn't affect the
   * options).
   *
   * @param options 	the list of options as an array of strings
   * @throws Exception 	if an option is not supported
   * @see    		#reset()
   */
  public void setOptions(String[] options) throws Exception {
    String	tmpStr;
    String[]	tmpOptions;
    String	classname;
    Filter	filter;

    reset();

    tmpStr = Utils.getOption("prefix-old", options);
    if (!tmpStr.isEmpty())
      setPrefixOld(tmpStr);
    else
      setPrefixOld(PREFIX_AMPLITUDE);

    tmpStr = Utils.getOption("prefix-new", options);
    if (!tmpStr.isEmpty())
      setPrefixNew(tmpStr);
    else
      setPrefixNew(PREFIX_AMPLITUDE);

    tmpStr = Utils.getOption("filter", options);
    if (tmpStr.length() > 0) {
      tmpOptions    = Utils.splitOptions(tmpStr);
      classname     = tmpOptions[0];
      tmpOptions[0] = "";
      filter = (Filter) Utils.forName(Filter.class, classname, tmpOptions);
      setFilter(filter);
    }
    else {
      setFilter(new AllFilter());
    }

    setKeepAttributeNames(Utils.getFlag("keep-attribute-names", options));

    super.setOptions(options);
  }

  /**
   * Gets the current settings of the filter.
   *
   * @return 		an array of strings suitable for passing to setOptions
   */
  public String[] getOptions() {
    Vector<String>	result;

    result = new Vector<String>(Arrays.asList(super.getOptions()));

    result.add("-prefix-old");
    result.add(getPrefixOld());

    result.add("-prefix-new");
    result.add(getPrefixNew());

    result.add("-filter");
    result.add(Utils.toCommandLine(getFilter()));

    if (getKeepAttributeNames())
      result.add("-keep-attribute-names");

    return result.toArray(new String[result.size()]);
  }

  /**
   * Sets the (old) attribute prefix to look for.
   *
   * @param value 	the prefix
   */
  public void setPrefixOld(String value) {
    m_PrefixOld = value;
    reset();
  }

  /**
   * Returns the (old) attribute prefix to look for.
   *
   * @return 		the prefix
   */
  public String getPrefixOld() {
    return m_PrefixOld;
  }

  /**
   * Returns the tip text for this property.
   *
   * @return 		tip text for this property suitable for
   * 			displaying in the GUI or for listing the options.
   */
  public String prefixOldTipText() {
    return "The (old) attribute prefix to look for.";
  }

  /**
   * Sets the (new) attribute prefix to use.
   *
   * @param value 	the prefix
   */
  public void setPrefixNew(String value) {
    m_PrefixNew = value;
    reset();
  }

  /**
   * Returns the (new) attribute prefix to use.
   *
   * @return 		the prefix
   */
  public String getPrefixNew() {
    return m_PrefixNew;
  }

  /**
   * Returns the tip text for this property.
   *
   * @return 		tip text for this property suitable for
   * 			displaying in the GUI or for listing the options.
   */
  public String prefixNewTipText() {
    return "The (new) attribute prefix to use.";
  }

  /**
   * Sets the base filter.
   *
   * @param value 	the base filter
   */
  public void setFilter(Filter value) {
    m_Filter = value;
    reset();
  }

  /**
   * Returns the base filter.
   *
   * @return 		the base filter
   */
  public Filter getFilter() {
    return m_Filter;
  }

  /**
   * Returns the tip text for this property.
   *
   * @return 		tip text for this property suitable for
   * 			displaying in the GUI or for listing the options.
   */
  public String filterTipText() {
    return "The base filter to apply to the spectral data.";
  }

  /**
   * Sets whether to keep the attribute names generated by the base filter.
   *
   * @param value 	true if to keep
   */
  public void setKeepAttributeNames(boolean value) {
    m_KeepAttributeNames = value;
    reset();
  }

  /**
   * Returns whether to keep the attribute names generated by the base filter.
   *
   * @return 		true if to keep
   */
  public boolean getKeepAttributeNames() {
    return m_KeepAttributeNames;
  }

  /**
   * Returns the tip text for this property.
   *
   * @return 		tip text for this property suitable for
   * 			displaying in the GUI or for listing the options.
   */
  public String keepAttributeNamesTipText() {
    return "If enabled, the attribute names generated by the base filter are kept (only disambiguated if necessary).";
  }

  /**
   * Returns the Capabilities of this filter. Derived filters have to
   * override this method to enable capabilities.
   *
   * @return            the capabilities of this object
   * @see               Capabilities
   */
  public Capabilities getCapabilities() {
    Capabilities 	result;

    result = m_Filter.getCapabilities();
    result.setOwner(this);

    result.enable(Capability.NUMERIC_ATTRIBUTES);
    result.enable(Capability.STRING_ATTRIBUTES);

    return result;
  }

  /**
   * Determines the output format based on the input format and returns
   * this. In case the output format cannot be returned immediately, i.e.,
   * hasImmediateOutputFormat() returns false, then this method will called
   * from batchFinished() after the call of preprocess(Instances), in which,
   * e.g., statistics for the actual processing step can be gathered.
   *
   * @param inputFormat     the input format to base the output format on
   * @return                the output format
   * @throws Exception      in case the determination goes wrong
   */
  protected Instances determineOutputFormat(Instances inputFormat) throws Exception {
    // dummy: will get determined in the process(Instances) method
    return inputFormat;
  }

  /**
   * Transforms the spectral data. Also initializes the m_MultiFilter member.
   *
   * @param instances	the data to transform
   * @return		the transformed spectral part
   * @throws Exception  in case transformation goes wrong
   */
  protected Instances transformSpectrum(Instances instances) throws Exception {
    Instances		result;
    StringBuilder	range;
    int			i;
    Remove		remove;

    // determine the attribute range for the spectrum
    range = new StringBuilder();
    for (i = 0; i < instances.numAttributes(); i++) {
      if (instances.attribute(i).name().startsWith(m_PrefixOld)) {
	if (range.length() > 0)
	  range.append(",");
	range.append("" + (i+1));
      }
    }
    // add class if present
    if (instances.classIndex() > -1) {
      if (range.length() > 0)
	range.append(",");
      range.append("" + (instances.classIndex()+1));
    }

    remove = new Remove();
    remove.setAttributeIndices(range.toString());
    remove.setInvertSelection(true);

    m_MultiFilter = new MultiFilter();
    m_MultiFilter.setFilters(
      new Filter[]{
        remove,
        ObjectCopyHelper.copyObject(m_Filter)
      }
    );

    m_MultiFilter.setInputFormat(instances);
    result = Filter.useFilter(instances, m_MultiFilter);

    return result;
  }

  /**
   * Disambiguates the attribute.
   *
   * @param current	the current attribute to disambiguate, if necessary
   * @param names	the names collected so far
   */
  protected String disambiguateAttributeName(String current, HashSet<String> names) {
    String	result;
    int		count;

    result = current;

    count = 1;
    while (names.contains(result)) {
      count++;
      result = current + "-" + count;
    }

    return result;
  }

  /**
   * Creates a new header based on the input data and the transformed spectral
   * part.
   *
   * @param original	the original input data
   * @param transformed	the transformed spectral part of the data
   * @return		the new header (without enough space reserved for all rows)
   */
  protected Instances createHeader(Instances original, Instances transformed) {
    Instances			result;
    int				i;
    int				n;
    ArrayList<Attribute>	atts;
    Attribute			att;
    boolean			first;
    int				clsIndex;
    HashSet<String>		names;
    String			name;

    // create new header
    atts     = new ArrayList<Attribute>();
    first    = true;
    clsIndex = -1;
    names    = new HashSet<>();
    for (i = 0; i < original.numAttributes(); i++) {
      if (original.attribute(i).name().startsWith(m_PrefixOld)) {
	if (first) {
	  first = false;
	  for (n = 0; n < transformed.numAttributes(); n++) {
	    if (n == transformed.classIndex())
	      continue;
	    att = transformed.attribute(n);
            if (m_KeepAttributeNames) {
	      name = disambiguateAttributeName(att.name(), names);
	      names.add(name);
	      atts.add(att.copy(name));
            }
            else {
              if (att.name().startsWith(m_PrefixOld))
                atts.add(att.copy(att.name().replace(m_PrefixOld, m_PrefixNew)));
              else
                atts.add(att.copy(m_PrefixNew + (n + 1)));
            }
	  }
	}
      }
      else {
	att = original.attribute(i);
	atts.add(att.copy(att.name()));
	if (i == original.classIndex())
	  clsIndex = atts.size() - 1;
      }
    }
    result = new Instances(original.relationName(), atts, original.numInstances());
    result.setClassIndex(clsIndex);

    return result;
  }

  /**
   * Transforms the instance (filters spectral part and adds all other data again).
   *
   * @param header	the header to use
   * @param inst	the instance to transform
   * @return		the transformed instance
   */
  protected Instance transformInstance(Instances header, Instance inst) throws Exception {
    Instance	result;
    Instance	transformed;
    double[]	values;
    int		i;
    int		n;
    boolean	first;
    Attribute	att;
    int		index;

    // transform the spectral part
    m_MultiFilter.input(inst);
    m_MultiFilter.batchFinished();
    transformed = m_MultiFilter.output();

    values = new double[header.numAttributes()];
    for (i = 0; i < values.length; i++)
      values[i] = Utils.missingValue();
    first  = (transformed != null);
    index  = 0;
    for (i = 0; i < inst.numAttributes(); i++) {
      if (inst.attribute(i).name().startsWith(m_PrefixOld)) {
	if (first) {
	  first = false;
	  for (n = 0; n < transformed.numAttributes(); n++) {
	    if (n == transformed.classIndex())
	      continue;
	    att = transformed.attribute(n);
            if (transformed.isMissing(n))
              values[index] = Utils.missingValue();
	    else if (att.isString())
	      values[index] = header.attribute(index).addStringValue(transformed.stringValue(n));
	    else if (att.isRelationValued())
	      values[index] = header.attribute(index).addRelation(transformed.relationalValue(n));
	    else
	      values[index] = transformed.value(n);
	    index++;
	  }
	}
      }
      else {
	att = inst.attribute(i);
        if (inst.isMissing(i))
          values[index] = Utils.missingValue();
	else if (att.isString())
	  values[index] = header.attribute(index).addStringValue(inst.stringValue(i));
	else if (att.isRelationValued())
	  values[index] = header.attribute(index).addRelation(inst.relationalValue(i));
	else
	  values[index] = inst.value(i);
	index++;
      }
    }

    result = new DenseInstance(inst.weight(), values);

    return result;
  }

  /**
   * processes the given instances (may change the provided instances) and
   * returns the modified version.
   *
   * @param instances   the instances to process
   * @return            the modified data
   * @throws Exception  in case the processing goes wrong
   */
  protected Instances process(Instances instances) throws Exception {
    Instances		result;
    Instances		transformed;
    int			i;

    if (!isFirstBatchDone()) {
      transformed = transformSpectrum(instances);
      result      = createHeader(instances, transformed);
      setOutputFormat(result);
    }
    else {
      result = getOutputFormat();
    }

    for (i = 0; i < instances.numInstances(); i++)
      result.add(transformInstance(result, instances.instance(i)));
    result.compactify();

    return result;
  }

  /**
   * Returns the revision string.
   *
   * @return		the revision
   */
  public String getRevision() {
    return RevisionUtils.extract("$Revision: 2347 $");
  }

  /**
   * Main method for testing this class.
   *
   * @param args 	should contain arguments to the filter: use -h for help
   */
  public static void main(String [] args) {
    runFilter(new SpectrumFilter(), args);
  }
}
