/*
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * AbstractFilteredMultiSpectrumFilter.java
 * Copyright (C) 2015 University of Waikato, Hamilton, NZ
 */

package adams.data.multifilter;

import adams.data.conversion.SpectraToMultiSpectrum;
import adams.data.spectrum.MultiSpectrum;
import adams.data.spectrum.Spectrum;

import java.util.ArrayList;
import java.util.List;

/**
 <!-- globalinfo-start -->
 * The pre-filters select the spectra from the incoming multi-spectrum and re-package them into a new multi-spectrum. This new multi-spectrum is then pushed through the actual filter.
 * <br><br>
 <!-- globalinfo-end -->
 *
 <!-- options-start -->
 * <pre>-logging-level &lt;OFF|SEVERE|WARNING|INFO|CONFIG|FINE|FINER|FINEST&gt; (property: loggingLevel)
 * &nbsp;&nbsp;&nbsp;The logging level for outputting errors and debugging output.
 * &nbsp;&nbsp;&nbsp;default: WARNING
 * </pre>
 * 
 * <pre>-no-id-update &lt;boolean&gt; (property: dontUpdateID)
 * &nbsp;&nbsp;&nbsp;If enabled, suppresses updating the ID of adams.data.id.IDHandler data containers.
 * &nbsp;&nbsp;&nbsp;default: false
 * </pre>
 * 
 * <pre>-pre-filter &lt;knir.data.multifilter.AbstractMultiSpectrumFilter&gt; [-pre-filter ...] (property: preFilters)
 * &nbsp;&nbsp;&nbsp;The pre-filters to use for creating the multi-spectrum presented to the 
 * &nbsp;&nbsp;&nbsp;base-filter.
 * &nbsp;&nbsp;&nbsp;default: 
 * </pre>
 * 
 * <pre>-base-filter &lt;knir.data.multifilter.AbstractMultiSpectrumFilter&gt; (property: baseFilter)
 * &nbsp;&nbsp;&nbsp;The base filter to apply to the multi-spectrum generated by the pre-filters.
 * &nbsp;&nbsp;&nbsp;default: knir.data.multifilter.PickByIndex
 * </pre>
 * 
 <!-- options-end -->
 *
 * @author FracPete (fracpete at waikato dot ac dot nz)
 * @version $Revision$
 */
public class FilteredMultiSpectrumFilter
  extends AbstractMultiSpectrumFilter {

  private static final long serialVersionUID = -976309129515023310L;

  /** the "pre" filters. */
  protected AbstractMultiSpectrumFilter[] m_PreFilters;

  /** the base filter. */
  protected AbstractMultiSpectrumFilter m_BaseFilter;

  /**
   * Returns a string describing the object.
   *
   * @return 			a description suitable for displaying in the gui
   */
  @Override
  public String globalInfo() {
    return
      "The pre-filters select the spectra from the incoming multi-spectrum "
        + "and re-package them into a new multi-spectrum. This new multi-spectrum "
        + "is then pushed through the actual filter.";
  }

  /**
   * Adds options to the internal list of options.
   */
  @Override
  public void defineOptions() {
    super.defineOptions();

    m_OptionManager.add(
	    "pre-filter", "preFilters",
	    new AbstractMultiSpectrumFilter[0]);

    m_OptionManager.add(
	    "base-filter", "baseFilter",
	    new PickByIndex());
  }

  /**
   * Sets the pre-filters.
   *
   * @param value 	the filters
   */
  public void setPreFilters(AbstractMultiSpectrumFilter[] value) {
    m_PreFilters = value;
    reset();
  }

  /**
   * Returns the pre-filters.
   *
   * @return 		the filters
   */
  public AbstractMultiSpectrumFilter[] getPreFilters() {
    return m_PreFilters;
  }

  /**
   * Returns the tip text for this property.
   *
   * @return 		tip text for this property suitable for
   * 			displaying in the GUI or for listing the options.
   */
  public String preFiltersTipText() {
    return "The pre-filters to use for creating the multi-spectrum presented to the base-filter.";
  }

  /**
   * Sets the base filter.
   *
   * @param value 	the base filter
   */
  public void setBaseFilter(AbstractMultiSpectrumFilter value) {
    m_BaseFilter = value;
    reset();
  }

  /**
   * Returns the base filter.
   *
   * @return 		the base filter
   */
  public AbstractMultiSpectrumFilter getBaseFilter() {
    return m_BaseFilter;
  }

  /**
   * Returns the tip text for this property.
   *
   * @return 		tip text for this property suitable for
   * 			displaying in the GUI or for listing the options.
   */
  public String baseFilterTipText() {
    return "The base filter to apply to the multi-spectrum generated by the pre-filters.";
  }

  /**
   * Performs the actual filtering.
   *
   * @param data	the data to filter
   * @return		the filtered data, null if failed to generate output
   */
  @Override
  protected Spectrum processData(MultiSpectrum data) {
    Spectrum			result;
    List<Spectrum>		filtered;
    int				i;
    Spectrum			spec;
    SpectraToMultiSpectrum	conv;
    String			msg;
    MultiSpectrum		multi;

    // pre-filter spectrum
    filtered = new ArrayList<>();
    for (i = 0; i < m_PreFilters.length; i++) {
      spec = m_PreFilters[i].filter(data);
      if (spec == null) {
	getLogger().severe("Pre-filter #" + (i+1) + " failed to produce spectrum!");
	return null;
      }
      filtered.add(spec);
    }

    // create new multi-spectrum
    conv = new SpectraToMultiSpectrum();
    conv.setInput(filtered.toArray(new Spectrum[filtered.size()]));
    msg = conv.convert();
    if (msg != null) {
      getLogger().severe("Failed to create multi-spectrum: " + msg);
      conv.cleanUp();
      return null;
    }
    multi = (MultiSpectrum) conv.getOutput();
    conv.cleanUp();

    // perform actual filtering
    result = m_BaseFilter.filter(multi);

    return result;
  }
}
